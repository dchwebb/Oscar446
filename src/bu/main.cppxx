#include "stm32f4xx.h"
#include <cmath>
#include "initialisation.h"
#include "lcd.h"

extern uint32_t SystemCoreClock;

//volatile uint16_t OscBufferA[2][DRAWWIDTH], OscBufferB[2][DRAWWIDTH], OscBufferC[2][DRAWWIDTH];
volatile uint16_t prevPixelA = 0, prevPixelB = 0, prevPixelC = 0, adcA, adcB, adcC, oldAdc, capturePos = 0, drawPos = 0, bufferSamples = 0;
volatile bool freqBelowZero, capturing = false, drawing = false, encoderBtnL = false, encoderBtnR = false;
volatile uint8_t VertOffsetA = 0, VertOffsetB = 0, captureBufferNumber = 0, drawBufferNumber = 0;
volatile int8_t encoderPendingL = 0, encoderStateL = 0, encoderPendingR = 0, encoderStateR = 0;
volatile int16_t drawOffset[2] {0, 0};
volatile uint16_t capturedSamples[2] {0, 0};
volatile uint32_t debugCount = 0, coverageTimer = 0, coverageTotal = 0;
volatile float freqFund;
volatile uint16_t ADC_array[ADC_BUFFER_LENGTH];
volatile uint16_t freqCrossZero, FFTErrors = 0;


//	default calibration values for 15k and 100k resistors on input opamp scaling to a maximum of 8v (slightly less for negative signals)
volatile int16_t vCalibOffset = -4190;
volatile float vCalibScale = 1.24f;
volatile int8_t voltScale = 8;
volatile uint16_t CalibZeroPos = 9985;

volatile uint16_t zeroCrossings[2] {0, 0};
volatile bool circDrawing[2] {false, false};
volatile uint16_t circDrawPos[2] {0, 0};
volatile uint16_t circPrevPixel[2] {0, 0};

volatile bool circDataAvailable[2] {false, false};
volatile float captureFreq[2] {0, 0};
volatile float circAngle;
mode displayMode = Oscilloscope;
#define CIRCLENGTH 160

LCD lcd;

int main(void)
{
	SystemClock_Config();					// Configure the clock and PLL - NB Currently done in SystemInit but will need updating for production board
	SystemCoreClockUpdate();				// Update SystemCoreClock (system clock frequency) derived from settings of oscillators, prescalers and PLL

//	InitADC();
	InitLCDHardware();
	lcd.Init();


	int i = 0;
	bool white = false;

	/* Infinite loop */
	while (1)
	{
		lcd.DrawString(100, 200, "Hello", &lcd.Font_Large, LCD_RED, LCD_BLACK);
		for (int y = 0; y < 240; y++) {
			for (int x = 0; x < 320; x++) {
				lcd.DrawPixel(x, y, (y << (white ? 6 : 5)) + x);
			}
		}
		white = !white;
		i++;
	}
}
